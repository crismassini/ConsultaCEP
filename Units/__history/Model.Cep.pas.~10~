unit Model.Cep;

interface
uses
  uAuxiliar, FireDAC.Comp.Client;
type
  TCepModel = class
  private
    FAcao: TAcao;
    FCodigo: Integer;
    FCep: string;
    FLogradouro: string;
    FComplemento: string;
    FBairro: string;
    FLocalidade: string;
    FUf: string;
    procedure SetAcao(const Value: TAcao);
    procedure SetCodigo(const Value: Integer);
    procedure SetNome(const Value: string);
  public
    function Obter: TFDQuery;
    function Salvar: Boolean;
    function GetId(AAutoIncrementar: Integer): Integer;
    property Codigo: Integer read FCodigo write SetCodigo;
    property Cep: string read FCep write SetNome;
    property Logradouro: string read FLogradouro write SetNome;
    property Complemento: string read FComplemento write SetNome;
    property Bairro: string read FBairro write SetNome;
    property Localidade: string read FLocalidade write SetNome;
    property Uf: string read FUf write SetNome;
    property Acao: TAcao read FAcao write SetAcao;
  end;

implementation

{ TCepModel }

uses Dao.Cep;

function TCepModel.GetId(AAutoIncrementar: Integer): Integer;
var
  VCepDao: TCepDao;
begin
  VCepDao := TCepDao.Create;
  try
    Result := VCepDao.GetId(AAutoIncrementar);
  finally
    VCepDao.Free;
  end;
end;

function TCepModel.Obter: TFDQuery;
var
  VCepDao: TCepDao;
begin
  VCepDao := TCepDao.Create;
  try
    Result := VCepDao.Obter;
  finally
    VCepDao.Free;
  end;
end;

function TCepModel.Salvar: Boolean;
var
  VCepDao: TCepDao;
begin
  Result := False;
  VCepDao := TCepDao.Create;
  try
    case FAcao of
      uAuxiliar.tacIncluir: Result := VCepDao.Incluir(Self);
      uAuxiliar.tacAlterar: Result := VCepDao.Alterar(Self);
      uAuxiliar.tacExcluir: Result := VCepDao.Excluir(Self);
    end;
  finally
    VCepDao.Free;
  end;
end;

procedure TCepModel.SetAcao(const Value: TAcao);
begin
  FAcao := Value;
end;

procedure TCepModel.SetCodigo(const Value: Integer);
begin
  FCodigo := Value;
end;

procedure TCepModel.SetCep(const Value: string);
begin
  FCep := Value;
end;

end.
